{
  "version": 3,
  "sources": ["../../src/web-components/base/index.ts", "../../src/web-components/base/styles/index.ts", "../../src/web-components/base/styles/variables.style.ts", "../../src/web-components/base/styles/typography.style.ts", "../../src/web-components/base/styles/sv-hr.style.ts", "../../src/web-components/base/styles/icon-button.style.ts"],
  "sourcesContent": ["import { LitElement } from 'lit';\n\nimport { useStore } from '../../common/utils/use-store';\nimport config from '../../services/config';\n\nimport { variableStyle, typography, svHr, iconButtonStyle } from './styles';\nimport { Constructor, WebComponentsBaseInterface } from './types';\n\nexport const WebComponentsBase = <T extends Constructor<LitElement>>(superClass: T) => {\n  class WebComponentsBaseClass extends superClass {\n    private unsubscribeFrom: Array<(id: unknown) => void> = [];\n    protected useStore = useStore.bind(this) as typeof useStore;\n\n    static styles = [\n      variableStyle,\n      typography,\n      svHr,\n      iconButtonStyle,\n      (superClass as unknown as typeof LitElement).styles ?? [],\n    ];\n\n    public connectedCallback() {\n      setTimeout(() => {\n        const rootStyleElement = document.getElementById('superviz-style');\n        const colorsStyleElement = this.createCustomColors();\n\n        const style = document.createElement('style');\n        style.innerHTML = rootStyleElement?.innerHTML || '';\n\n        this.shadowRoot?.appendChild(style);\n\n        if (colorsStyleElement) {\n          this.shadowRoot?.appendChild(colorsStyleElement);\n        }\n      });\n\n      super.connectedCallback();\n    }\n\n    /**\n     * @function disconnectedCallback\n     * @description Unsubscribes from all the subjects\n     * @returns {void}\n     */\n    public disconnectedCallback() {\n      super.disconnectedCallback();\n      this.unsubscribeFrom.forEach((unsubscribe) => unsubscribe(this));\n    }\n\n    /**\n     * @function createCustomColors\n     * @description Creates a custom style tag with the colors from the configuration\n     * @returns {HTMLStyleElement} - The style tag with the colors\n     */\n    private createCustomColors(): HTMLStyleElement {\n      if (!config.get('colors')) return;\n\n      const tag = document.createElement('style');\n      const readyColors = Object.entries(config.get('colors'))\n        .map(([key, value]) => `--${key}: ${value} !important;`)\n        .join(' ');\n\n      tag.innerHTML = `\n      * {\n        ${readyColors}\n      }\n    `;\n\n      return tag;\n    }\n\n    /**\n     * @function emitEvent\n     * @description Emits a custom event with the given name, detail and optional configuration\n     * @param {string} name - The name of the custom even\n     * @param {object} detail - The detail of the custom event\n     * @param {object} configs - The configuration of the custom event\n     * @returns {void}\n     */\n    protected emitEvent(\n      name: string,\n      detail: object,\n      configs: object = { composed: true, bubbles: true },\n    ): void {\n      const event = new CustomEvent(name, { detail, ...configs });\n      this.dispatchEvent(event);\n    }\n  }\n\n  return WebComponentsBaseClass as unknown as Constructor<WebComponentsBaseInterface> & T;\n};\n", "export { variableStyle } from './variables.style';\nexport { typography } from './typography.style';\nexport { svHr } from './sv-hr.style';\nexport { iconButtonStyle } from './icon-button.style';\n", "import { css } from 'lit';\n\nexport const variableStyle = css`\n  * {\n    --sv-primary: 98, 16, 204;\n    --sv-primary-900: 56, 7, 136;\n    --sv-primary-200: 193, 161, 234;\n    --sv-secondary: 193, 251, 223;\n    --sv-gray: 126, 122, 136;\n    --sv-success: 12, 185, 71;\n    --sv-danger: 229, 65, 30;\n    --sv-black: 19, 18, 21;\n    --sv-white: 255, 255, 255;\n    --sv-gray-100: 250, 250, 252;\n    --sv-gray-200: 233, 229, 239;\n    --sv-gray-300: 201, 196, 209;\n    --sv-gray-400: 174, 169, 184;\n    --sv-gray-500: 126, 122, 136;\n    --sv-gray-600: 87, 83, 95;\n    --sv-gray-700: 57, 54, 62;\n    --sv-gray-800: 38, 36, 42;\n  }\n\n  .sv-gray-200 {\n    color: rgb(var(--sv-gray-200));\n  }\n\n  .sv-gray-400 {\n    color: rgb(var(--sv-gray-400));\n  }\n\n  .sv-gray-500 {\n    color: rgb(var(--sv-gray-500));\n  }\n\n  .sv-gray-600 {\n    color: rgb(var(--sv-gray-600));\n  }\n\n  .sv-gray-700 {\n    color: rgb(var(--sv-gray-700));\n  }\n`;\n", "import { css } from 'lit';\n\nexport const typography = css`\n  .text {\n    font-family: Roboto;\n    font-size: 12px;\n    font-style: normal;\n    font-weight: 400;\n    line-height: 20px;\n  }\n\n  .text-bold {\n    font-weight: 700;\n  }\n\n  .text-big {\n    font-size: 14px;\n  }\n\n  .text-small {\n    font-size: 10px;\n  }\n`;\n", "import { css } from 'lit';\n\nexport const svHr = css`\n  .sv-hr {\n    width: 100%;\n    height: 1px;\n    background: rgb(var(--sv-gray-200));\n    padding: 0px;\n    margin: 0px;\n    position: relative;\n  }\n`;\n", "import { css } from 'lit';\n\nexport const iconButtonStyle = css`\n  .icon-button {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background: rgba(0, 0, 0, 0);\n    border: 0px;\n    width: 32px;\n    height: 32px;\n  }\n\n  .icon-button > superviz-icon {\n    display: flex !important;\n  }\n\n  .icon-button--xsmall {\n    width: 18px;\n    height: 18px;\n  }\n\n  .icon-button--small {\n    width: 24px;\n    height: 24px;\n  }\n\n  .icon-button--medium {\n    width: 32px;\n    height: 32px;\n  }\n\n  .icon-button--large {\n    width: 40px;\n    height: 40px;\n  }\n\n  .icon-button--clickable {\n    cursor: pointer;\n    border-radius: 100%;\n  }\n\n  .icon-button--clickable:hover:not(.icon-button--no-hover) {\n    background: rgb(var(--sv-gray-300));\n    transition: 0.25s background-color ease-in;\n  }\n  \n  .icon-button--clickable:focus:not(.icon-button--no-hover) {\n    transition: 0.25s background-color ease-in;\n    background: rgb(var(--sv-gray-300));\n  }\n`;\n"],
  "mappings": "sIAAAA,ICAAC,ICAAC,IAEO,IAAMC,EAAgBC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;ECF7BC,IAEO,IAAMC,EAAaC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;ECF1BC,IAEO,IAAMC,EAAOC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;ECFpBC,IAEO,IAAMC,EAAkBC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;ELMxB,IAAMC,EAAwDC,GAAkB,CARvF,IAAAC,EASE,MAAMC,UAA+BF,CAAW,CAAhD,kCACE,KAAQ,gBAAgD,CAAC,EACzD,KAAU,SAAWG,EAAS,KAAK,IAAI,EAUhC,mBAAoB,CACzB,WAAW,IAAM,CAtBvB,IAAAF,EAAAG,EAuBQ,IAAMC,EAAmB,SAAS,eAAe,gBAAgB,EAC3DC,EAAqB,KAAK,mBAAmB,EAE7CC,EAAQ,SAAS,cAAc,OAAO,EAC5CA,EAAM,WAAYF,GAAA,YAAAA,EAAkB,YAAa,IAEjDJ,EAAA,KAAK,aAAL,MAAAA,EAAiB,YAAYM,GAEzBD,KACFF,EAAA,KAAK,aAAL,MAAAA,EAAiB,YAAYE,GAEjC,CAAC,EAED,MAAM,kBAAkB,CAC1B,CAOO,sBAAuB,CAC5B,MAAM,qBAAqB,EAC3B,KAAK,gBAAgB,QAASE,GAAgBA,EAAY,IAAI,CAAC,CACjE,CAOQ,oBAAuC,CAC7C,GAAI,CAACC,EAAO,IAAI,QAAQ,EAAG,OAE3B,IAAMC,EAAM,SAAS,cAAc,OAAO,EACpCC,EAAc,OAAO,QAAQF,EAAO,IAAI,QAAQ,CAAC,EACpD,IAAI,CAAC,CAACG,EAAKC,CAAK,IAAM,KAAKD,CAAG,KAAKC,CAAK,cAAc,EACtD,KAAK,GAAG,EAEX,OAAAH,EAAI,UAAY;AAAA;AAAA,UAEZC,CAAW;AAAA;AAAA,MAIRD,CACT,CAUU,UACRI,EACAC,EACAC,EAAkB,CAAE,SAAU,GAAM,QAAS,EAAK,EAC5C,CACN,IAAMC,EAAQ,IAAI,YAAYH,EAAMI,EAAA,CAAE,OAAAH,GAAWC,EAAS,EAC1D,KAAK,cAAcC,CAAK,CAC1B,CACF,CA1EE,OAJIf,EAIG,OAAS,CACdiB,EACAC,EACAC,EACAC,GACCrB,EAAAD,EAA4C,SAA5C,KAAAC,EAAsD,CAAC,CAC1D,EAsEKC,CACT",
  "names": ["init_define_process_env", "init_define_process_env", "init_define_process_env", "variableStyle", "i", "init_define_process_env", "typography", "i", "init_define_process_env", "svHr", "i", "init_define_process_env", "iconButtonStyle", "i", "WebComponentsBase", "superClass", "_a", "WebComponentsBaseClass", "useStore", "_b", "rootStyleElement", "colorsStyleElement", "style", "unsubscribe", "config_default", "tag", "readyColors", "key", "value", "name", "detail", "configs", "event", "__spreadValues", "variableStyle", "typography", "svHr", "iconButtonStyle"]
}
