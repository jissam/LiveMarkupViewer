import { Logger } from '../../common/utils';
import { BaseComponent } from '../base';
import { ComponentNames } from '../types';
import { VideoComponentOptions } from './types';
export declare class VideoConference extends BaseComponent {
    name: ComponentNames;
    protected logger: Logger;
    private participantsOnMeeting;
    private localParticipant;
    private videoManager;
    private connectionService;
    private browserService;
    private videoConfig;
    private params?;
    private roomState;
    private drawingRoom;
    private kickParticipantsOnHostLeave;
    constructor(params?: VideoComponentOptions);
    /**
     * @function toggleMeetingSetup
     * @description open/close meeting setup
     * @returns {void}
     */
    toggleMeetingSetup(): void;
    /**
     * @function toggleMicrophone
     * @description mute/unmute user's microphone
     * @returns {void}
     */
    toggleMicrophone(): void;
    /**
     * @function toggleCam
     * @description enable/disable user's camera
     * @returns {void}
     */
    toggleCam(): void;
    /**
     * @function toggleScreenShare
     * @description enable/disable user's screen share
     * @returns {void}
     */
    toggleScreenShare(): void;
    /**
     * @function toggleChat
     * @description open/close meeting chat
     * @returns {void}
     */
    toggleChat(): void;
    /**
     * @function toggleRecording
     * @description open/close meeting recording
     * @returns {void}
     */
    toggleRecording(): void;
    /**
     * @function hangUp
     * @description hang up user's call
     * @returns {void}
     * */
    hangUp(): void;
    /**
     * @function start
     * @description start video conference
     * @returns {void}
     */
    protected start(): void;
    /**
     * @function destroy
     * @description destroy video conference
     * @returns {void}
     */
    protected destroy(): void;
    /**
     * @function startVideo
     * @description start video manager
     * @returns {void}
     */
    private startVideo;
    /**
     * @function subscribeToVideoEvents
     * @description subscribe to video events
     * @returns {void}
     */
    private subscribeToVideoEvents;
    /**
     * @function unsubscribeFromVideoEvents
     * @description unsubscribe from video events
     * @returns {void}
     * */
    private unsubscribeFromVideoEvents;
    /**
     * @function suscribeToRealtimeEvents
     * @description subscribe to realtime events
     * @returns {void}
     */
    private suscribeToRealtimeEvents;
    /**
     * @function unsubscribeFromRealtimeEvents
     * @description subscribe to realtime events
     * @returns {void}
     */
    private unsubscribeFromRealtimeEvents;
    private subscribeToStoreUpdates;
    /**
     * @function createParticipantFromPresence
     * @description create a participant object from the data coming from the IO
     * @param {PresenceEvent<Participant>} participant - the presence event object
     * @returns {Participant} a participant
     * */
    private createParticipantFromPresence;
    /** Video Events */
    /**
     * @function onFrameSizeDidChange
     * @description handler for frame size change event
     * @param {Dimensions} dimensions - frame dimensions
     * @returns {void}
     * */
    private onFrameSizeDidChange;
    /**
     * @function onWaitingForHost
     * @description handler for waiting for host event
     * @param {boolean} waiting - whether or not waiting for host
     * @returns {void}
     */
    private onWaitingForHost;
    /**
     * @function onCOnnectionStatusChange
     * @description handler for connection status change event
     * @param {MeetingConnectionStatus} newStatus - new connection status
     * @returns {void}
     */
    private onConnectionStatusChange;
    /**
     * @function onMeetingStateChange
     * @description handler for meeting state change event
     * @param {MeetingState} state - meeting state
     * @returns {void}
     */
    private onMeetingStateChange;
    /**
     * @function onSameAccountError
     * @description handler for same account error event
     * @param {string} error - error message
     * @returns {void}
     * */
    private onSameAccountError;
    /**
     * @function onDevicesChange
     * @description handler for devices change event
     * @param {DeviceEvent} state - device state
     * @returns {void}
     * */
    private onDevicesChange;
    /**
     * @function onFrameStateChange
     * @description handler for frame state change event
     * @param {VideoFrameState} state - frame state
     * @returns
     */
    private onFrameStateChange;
    /**
     * @function onRealtimeEventFromFrame
     * @description handler for realtime event
     * @param {RealtimeObserverPayload} payload - realtime event payload
     * @returns {void}
     * */
    private onRealtimeEventFromFrame;
    /**
     * @function onParticipantJoined
     * @description handler for participant joined event
     * @param {Participant} participant - participant
     * @returns {void}
     */
    private onParticipantJoined;
    /**
     * @function onParticipantLeft
     * @description handler for participant left event
     * @param {Participant} _ - participant
     * @returns {void}
     */
    private onParticipantLeft;
    /**
     * @function onParticipantListUpdate
     * @description callback that is called everytime the global participants list updates
     * @param {Record<string, Participant>} participants - participants
     * @returns {void}
     */
    private onParticipantListUpdate;
    /** Realtime Events */
    /**
     * @function onKickLocalParticipant
     * @description handler for kick local participant event
     * @param {string} participantId - participant id
     * @returns {void}
     */
    private onKickLocalParticipant;
    /**
     * @function setDrawing
     * @description publish drawing data to frame
     * @param {DrawingData} drawing - drawing data
     * @returns {void}
     */
    private setDrawing;
    /**
     * @function setHost
     * @description publish host id to frame
     * @param {string} hostId - host id
     * @returns {void}
     */
    private setHost;
    /**
     * @function setGridMode
     * @description publish grid mode to frame
     * @param {boolean} isGridModeEnabled - grid mode enabled
     * @returns {void}
     */
    private setGridMode;
    /**
     * @function setTranscript
     * @description publish transcript to frame
     * @param {TranscriptState} transcript - transcript
     * @returns {void}
     */
    private setTranscript;
    /**
     * @function setFollowParticipant
     * @description publish follow participant to frame
     * @param {string} participantId - participant id
     * @returns {void}
     */
    private setFollowParticipant;
    /**
     * @function setGather
     * @description publish gather to frame
     * @param {boolean} gather - gather
     * @returns {void}
     */
    private setGather;
    /**
     * @function onRealtimeParticipantsDidChange
     * @description handler for participant list update event
     * @param {Participant[]} participants - participants
     * @returns {void}
     */
    private onRealtimeParticipantsDidChange;
    /**
     * @function onHostParticipantDidChange
     * @description handler for host participant change event
     * @param {string} hostId - new host ud
     * @returns {void}
     * */
    private onHostParticipantDidChange;
    /**
     * @function onHostAvailabilityChange
     * @description Callback function that is called when the availability of the host changes.
     * @param {boolean} isHostAvailable - A boolean indicating whether the host is available or not.
     * @returns {void}
     */
    private onHostAvailabilityChange;
    /**
     * @function onParticipantJoinedOnRealtime
     * @description handler for participant joined event
     * @param {PresenceEvent<Participant>} participant - participant
     * @returns {void}
     */
    private onParticipantJoinedOnRealtime;
    /**
     * @function onParticipantLeftOnRealtime
     * @description handler for participant left event
     * @param {PresenceEvent<Participant>} participant
     * @returns {void}
     */
    private onParticipantLeftOnRealtime;
    private onParticipantUpdateOnRealtime;
    /**
     * @function validateIfInTheRoomHasHost
     * @description checks if the room has a host
     * @returns {void}
     */
    private validateIfInTheRoomHasHost;
}
