import { PresenceEvent, Room } from '@superviz/socket-client';
import { Participant } from '../../common/types/participant.types';
import { Observer } from '../../common/utils';
import { useStore } from '../../common/utils/use-store';
import { ParticipantDataInput } from './types';
export declare class Presence3DManager {
    private room;
    private useStore;
    participants3DObservers: Observer[];
    private localParticipant;
    private logger;
    constructor(room: Room, store: typeof useStore);
    private initializeParticipantsList;
    private onLocalParticipantJoined;
    private subscribeToRoomEvents;
    private unsubscribeFromRoomEvents;
    private onJoinedRoom;
    onLeaveRoom: (event: PresenceEvent) => void;
    private unthrottledUpdatePresence3D;
    private onJoinedPresence;
    updatePresence3D: import("lodash").DebouncedFunc<(data: Participant) => void>;
    /**
     * @function publish3DUpdate
     * @param {AblyParticipant} participant
     * @description publish a participant's changes to observer
     * @returns {void}
     */
    private onParticipantUpdate;
    /**
     * @function subscribeToUpdates
     * @description subscribe to a participant's events
     * @param {string} participantId
     * @param {Function} callback
     * @returns {void}
     */
    subscribeToUpdates(participantId: string, callback: Function): void;
    /**
     * @function unsubscribeFromUpdates
     * @description unsubscribe to a participant's events
     * @param {string} participantId
     * @param {Function} callback
     * @returns {void}
     */
    unsubscribeFromUpdates(participantId: string, callback: Function): void;
    setParticipantData: (participant: ParticipantDataInput) => void;
    get getParticipants(): Participant[];
}
