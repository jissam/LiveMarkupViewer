import * as Socket from '@superviz/socket-client';
import { Subject } from 'rxjs';
import { Participant } from '../../common/types/participant.types';
import { IOCState } from './types';
export declare class IOC {
    private participant;
    state: Socket.ConnectionState;
    client: Socket.Realtime;
    stateSubject: Subject<IOCState>;
    constructor(participant: Participant);
    /**
     * @function destroy
     * @description Destroys the socket connection
     * @returns {void}
     */
    destroy(): void;
    /**
     * @function subscribeToDefaultEvents
     * @description subscribe to the default socket events
     * @returns {void}
     */
    private subscribeToDefaultEvents;
    private handleConnectionState;
    /**
     * @function createClient
     * @description create a new socket client
     * @returns {void}
     */
    createClient(): void;
    /**
     * @function createRoom
     * @description create and join realtime room
     * @param {string} roomName - name of the room that will be created
     * @param {number | 'unlimited'} connectionLimit -
     *  connection limit for the room, the default is 50 because it's the maximum number of slots
     * @returns {Room}
     */
    createRoom(roomName: string, connectionLimit?: number | 'unlimited'): Socket.Room;
}
